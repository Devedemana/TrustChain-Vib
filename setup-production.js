#!/usr/bin/env node

/**
 * TrustChain Production Setup Script
 * Helps configure the application for production deployment with real IC canister
 */

const fs = require('fs');
const path = require('path');
const readline = require('readline');

const rl = readline.createInterface({
  input: process.stdin,
  output: process.stdout
});

console.log(`
üöÄ TrustChain Production Setup
===============================
This script will help you configure your app for production deployment.
`);

function question(query) {
  return new Promise(resolve => rl.question(query, resolve));
}

async function setup() {
  try {
    console.log('üìã Please provide the following information:\n');

    // Get canister ID
    const canisterId = await question('üîó Enter your IC canister ID: ');
    
    if (!canisterId || canisterId.trim() === '') {
      console.log('‚ùå Canister ID is required for production deployment.');
      process.exit(1);
    }

    // Optional WebSocket URL
    const websocketUrl = await question('üîó WebSocket URL for real-time features (optional): ');

    // Confirm production mode
    const enableProduction = await question('üöÄ Enable production mode? (y/N): ');
    const isProduction = enableProduction.toLowerCase().startsWith('y');

    // Create .env.local file
    const envContent = `# TrustChain Production Configuration
# Generated by setup script on ${new Date().toISOString()}

# Production Settings
REACT_APP_USE_PRODUCTION=${isProduction}
REACT_APP_CANISTER_ID=${canisterId.trim()}
REACT_APP_NETWORK=ic
REACT_APP_IC_HOST=https://icp0.io

# Disable mock data in production
REACT_APP_USE_MOCK_DATA=${!isProduction}

# Optional Features
${websocketUrl ? `REACT_APP_WEBSOCKET_URL=${websocketUrl.trim()}` : '# REACT_APP_WEBSOCKET_URL='}

# Feature Flags
REACT_APP_ENABLE_ANALYTICS=true
REACT_APP_ENABLE_FRAUD_DETECTION=true
REACT_APP_ENABLE_REALTIME=true

# Development Fallbacks
CANISTER_ID_TRUSTCHAIN_BACKEND=${canisterId.trim()}
DFX_NETWORK=ic
`;

    // Write .env.local file
    const envPath = path.join(process.cwd(), '.env.local');
    fs.writeFileSync(envPath, envContent);

    console.log(`
‚úÖ Configuration Complete!
==========================

üìÅ Created: .env.local
üîó Canister ID: ${canisterId.trim()}
${websocketUrl ? `üåê WebSocket URL: ${websocketUrl.trim()}` : ''}
üöÄ Production Mode: ${isProduction ? 'ENABLED' : 'DISABLED'}

Next Steps:
-----------
1. Review the generated .env.local file
2. Run 'npm install' to install dependencies  
3. Run 'npm run build' to build for production
4. Deploy to your hosting platform

For detailed deployment instructions, see:
üìñ PRODUCTION_DEPLOYMENT.md

Good luck with your competition! üèÜ
`);

  } catch (error) {
    console.error('‚ùå Setup failed:', error.message);
    process.exit(1);
  } finally {
    rl.close();
  }
}

setup();
