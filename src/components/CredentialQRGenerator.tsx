import React, { useState, useEffect } from 'react';
import {
  Box,
  Paper,
  Typography,
  TextField,
  Button,
  Alert,
  Card,
  CardContent,
  Divider,
  IconButton,
  Dialog,
  DialogTitle,
  DialogContent,
  DialogActions
} from '@mui/material';
import {
  QrCode2,
  Download,
  Share,
  Print,
  ContentCopy
} from '@mui/icons-material';
import QRCode from 'qrcode';

interface CredentialQRGeneratorProps {
  credentialId?: string;
  onClose?: () => void;
}

const CredentialQRGenerator: React.FC<CredentialQRGeneratorProps> = ({ 
  credentialId: initialCredentialId, 
  onClose 
}) => {
  const [credentialId, setCredentialId] = useState(initialCredentialId || '');
  const [qrCodeDataUrl, setQrCodeDataUrl] = useState<string>('');
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);
  const [isDialogOpen, setIsDialogOpen] = useState(false);

  // Generate QR code when credential ID changes
  useEffect(() => {
    if (credentialId.trim()) {
      generateQRCode(credentialId.trim());
    } else {
      setQrCodeDataUrl('');
    }
  }, [credentialId]);

  const generateQRCode = async (id: string) => {
    if (!id.trim()) {
      setError('Credential ID is required');
      return;
    }

    setLoading(true);
    setError(null);

    try {
      // Generate QR code with high error correction and larger size
      const qrDataUrl = await QRCode.toDataURL(id, {
        errorCorrectionLevel: 'H',
        type: 'image/png',
        margin: 2,
        color: {
          dark: '#000000',
          light: '#FFFFFF'
        },
        width: 300
      });

      setQrCodeDataUrl(qrDataUrl);
      console.log('QR code generated for credential:', id);
    } catch (error) {
      console.error('Error generating QR code:', error);
      setError('Failed to generate QR code');
      setQrCodeDataUrl('');
    } finally {
      setLoading(false);
    }
  };

  const handleDownload = () => {
    if (!qrCodeDataUrl) return;

    // Create download link
    const link = document.createElement('a');
    link.href = qrCodeDataUrl;
    link.download = `credential-qr-${credentialId}.png`;
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
  };

  const handlePrint = () => {
    if (!qrCodeDataUrl) return;

    const printWindow = window.open('', '', 'width=600,height=600');
    if (printWindow) {
      printWindow.document.write(`
        <html>
          <head>
            <title>TrustChain Credential QR Code</title>
            <style>
              body { 
                font-family: Arial, sans-serif; 
                text-align: center; 
                padding: 20px; 
              }
              .qr-container { 
                margin: 20px auto; 
                max-width: 400px; 
              }
              .qr-image { 
                max-width: 100%; 
                height: auto; 
                border: 2px solid #ccc; 
                border-radius: 8px; 
              }
              .credential-info { 
                margin-top: 20px; 
                font-size: 14px; 
                color: #666; 
              }
            </style>
          </head>
          <body>
            <h1>TrustChain Credential</h1>
            <div class="qr-container">
              <img src="${qrCodeDataUrl}" alt="QR Code" class="qr-image" />
            </div>
            <div class="credential-info">
              <p><strong>Credential ID:</strong> ${credentialId}</p>
              <p><strong>Scan this QR code to verify the credential</strong></p>
              <p><em>Generated by TrustChain - Decentralized Credential Verification</em></p>
            </div>
          </body>
        </html>
      `);
      printWindow.document.close();
      printWindow.print();
    }
  };

  const handleShare = async () => {
    if (!qrCodeDataUrl) return;

    // Convert data URL to blob
    const response = await fetch(qrCodeDataUrl);
    const blob = await response.blob();
    
    if (navigator.share && navigator.canShare) {
      try {
        const file = new File([blob], `credential-qr-${credentialId}.png`, { type: 'image/png' });
        
        if (navigator.canShare({ files: [file] })) {
          await navigator.share({
            title: 'TrustChain Credential QR Code',
            text: `Credential ID: ${credentialId}`,
            files: [file]
          });
        } else {
          // Fallback to sharing URL
          await navigator.share({
            title: 'TrustChain Credential QR Code',
            text: `Verify this credential: ${credentialId}`,
            url: window.location.href
          });
        }
      } catch (error) {
        console.error('Error sharing:', error);
        setError('Unable to share QR code');
      }
    } else {
      // Fallback: Copy credential ID to clipboard
      try {
        await navigator.clipboard.writeText(credentialId);
        setError(null);
        // Show success message
        setError('Credential ID copied to clipboard!');
        setTimeout(() => setError(null), 3000);
      } catch (error) {
        setError('Unable to copy credential ID');
      }
    }
  };

  const copyCredentialId = async () => {
    try {
      await navigator.clipboard.writeText(credentialId);
      setError('Credential ID copied to clipboard!');
      setTimeout(() => setError(null), 2000);
    } catch (error) {
      setError('Failed to copy credential ID');
    }
  };

  const openFullScreenDialog = () => {
    setIsDialogOpen(true);
  };

  const closeFullScreenDialog = () => {
    setIsDialogOpen(false);
  };

  return (
    <>
      <Paper 
        elevation={0}
        sx={{ 
          background: 'rgba(255, 255, 255, 0.1)', 
          backdropFilter: 'blur(10px)',
          borderRadius: 3,
          p: 4,
          color: 'white'
        }}
      >
        <Typography variant="h5" gutterBottom>
          Generate QR Code
        </Typography>
        
        <Typography variant="body2" sx={{ opacity: 0.8, mb: 3 }}>
          Generate a QR code for easy credential verification
        </Typography>

        {/* Credential ID Input */}
        <Box sx={{ mb: 3 }}>
          <TextField
            fullWidth
            label="Credential ID"
            value={credentialId}
            onChange={(e) => setCredentialId(e.target.value)}
            placeholder="Enter or paste credential ID"
            sx={{ 
              '& .MuiOutlinedInput-root': { 
                color: 'white',
                '& fieldset': { borderColor: 'rgba(255, 255, 255, 0.3)' },
                '&:hover fieldset': { borderColor: 'rgba(255, 255, 255, 0.5)' },
                '&.Mui-focused fieldset': { borderColor: 'white' }
              },
              '& .MuiInputLabel-root': { color: 'rgba(255, 255, 255, 0.7)' }
            }}
            InputProps={{
              endAdornment: credentialId && (
                <IconButton 
                  onClick={copyCredentialId}
                  sx={{ color: 'rgba(255, 255, 255, 0.7)' }}
                  size="small"
                >
                  <ContentCopy />
                </IconButton>
              )
            }}
          />
        </Box>

        {/* Error Display */}
        {error && (
          <Alert 
            severity={error.includes('copied') ? 'success' : 'error'} 
            sx={{ mb: 3 }}
          >
            {error}
          </Alert>
        )}

        {/* QR Code Display */}
        {qrCodeDataUrl && (
          <Card sx={{ 
            background: 'rgba(255, 255, 255, 0.9)', 
            color: 'black',
            mb: 3
          }}>
            <CardContent sx={{ textAlign: 'center' }}>
              <Typography variant="h6" gutterBottom>
                Credential QR Code
              </Typography>
              
              <Box 
                sx={{ 
                  display: 'inline-block',
                  p: 2,
                  background: 'white',
                  borderRadius: 2,
                  mb: 2,
                  cursor: 'pointer'
                }}
                onClick={openFullScreenDialog}
              >
                <img 
                  src={qrCodeDataUrl} 
                  alt="Credential QR Code"
                  style={{ 
                    maxWidth: '200px',
                    height: 'auto',
                    display: 'block'
                  }}
                />
              </Box>

              <Typography variant="body2" sx={{ opacity: 0.7, mb: 2 }}>
                Click to view full size
              </Typography>

              <Divider sx={{ my: 2 }} />

              {/* Action Buttons */}
              <Box sx={{ display: 'flex', gap: 1, justifyContent: 'center', flexWrap: 'wrap' }}>
                <Button
                  variant="contained"
                  startIcon={<Download />}
                  onClick={handleDownload}
                  size="small"
                >
                  Download
                </Button>
                
                <Button
                  variant="outlined"
                  startIcon={<Print />}
                  onClick={handlePrint}
                  size="small"
                >
                  Print
                </Button>
                
                <Button
                  variant="outlined"
                  startIcon={<Share />}
                  onClick={handleShare}
                  size="small"
                >
                  Share
                </Button>
              </Box>

              <Typography variant="body2" sx={{ mt: 2, opacity: 0.6 }}>
                Credential ID: {credentialId}
              </Typography>
            </CardContent>
          </Card>
        )}

        {/* Instructions */}
        <Alert severity="info" sx={{ mt: 2 }}>
          <Typography variant="body2">
            <strong>How to use:</strong>
            <br />â€¢ Enter a credential ID to generate its QR code
            <br />â€¢ Share the QR code with verifiers
            <br />â€¢ Others can scan it using the QR scanner in the verification section
          </Typography>
        </Alert>

        {/* Close button if this is used as a modal */}
        {onClose && (
          <Box sx={{ mt: 3, textAlign: 'right' }}>
            <Button variant="outlined" onClick={onClose}>
              Close
            </Button>
          </Box>
        )}
      </Paper>

      {/* Full Screen QR Code Dialog */}
      <Dialog
        open={isDialogOpen}
        onClose={closeFullScreenDialog}
        maxWidth="sm"
        fullWidth
      >
        <DialogTitle>Credential QR Code</DialogTitle>
        <DialogContent sx={{ textAlign: 'center', py: 4 }}>
          {qrCodeDataUrl && (
            <Box>
              <img 
                src={qrCodeDataUrl} 
                alt="Credential QR Code"
                style={{ 
                  maxWidth: '100%',
                  height: 'auto',
                  border: '2px solid #ccc',
                  borderRadius: '8px'
                }}
              />
              <Typography variant="body2" sx={{ mt: 2, opacity: 0.7 }}>
                Credential ID: {credentialId}
              </Typography>
            </Box>
          )}
        </DialogContent>
        <DialogActions>
          <Button onClick={handleDownload} startIcon={<Download />}>
            Download
          </Button>
          <Button onClick={handlePrint} startIcon={<Print />}>
            Print
          </Button>
          <Button onClick={closeFullScreenDialog}>
            Close
          </Button>
        </DialogActions>
      </Dialog>
    </>
  );
};

export default CredentialQRGenerator;
